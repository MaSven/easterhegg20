#+title:
#+author: w1ntermute,splitiii
#+OPTIONS: reveal_single_file:t toc:nil slideNumber:nil num:nil
#+REVEAL_INIT_OPTIONS: slideNumber:false
#+reveal_title_slide: %t </br> %a
#+REVEAL_THEME: white
#+REVEAL_PLUGINS: (highlight notes)
#+reveal_title_slide_background: ./fig/chatkontrolle_title.jpg



* docker build process :w1ntermute:
** Layer
#+begin_src dockerfile
# syntax=docker/dockerfile:1
FROM ubuntu:18.04
COPY . /app
RUN make /app
CMD python /app/app.py
#+end_src
#+Reveal: split
- Jede zeile ist ein neuer Layer.
- Docker mergt diese Layer, um das fertige image zu erstellen
- Diese werden zur Buildzeit ausgeführt
- Docker speichert diese mit, um zu zeigen wie ein image gebaut wird.
#+reveal: split
#+CAPTION: Beispiel von Docker layern auf der Website
#+name: fig:docke-1
#+ATTR_HTML: :style height:65vh
[[./fig/docker_layer_example.png]]

* wie kommen credentials in docker :w1ntermute:
** ENV
#+begin_src dockerfile :exports both :results value
FROM phusion/baseimage:jammy-1.0.1
ENV SUPER_SECURE_TOKEN="totally_not_visable_anywhere"
#+end_src

#+RESULTS:
** ARGS
#+begin_src dockerfile :exports both :results value
FROM busybox
ARG MORE_SECURE_TOKEN
#+end_src
** Hardcoded
#+begin_src dockerfile :exports both :results value
FROM busybox
RUN export I_KNOW_THIS_IS_NOT_SECURE="JUST_FOR_TESTING_REALLY"
#+end_src
** Die einzige richige methode
#+begin_src dockerfile :exports both :results value
FROM python:3
RUN pip install awscli
RUN --mount=type=secret,id=aws,target=/root/.aws/credentials \
  aws s3 cp s3://... ...
#+end_src
#+reveal: split
- Oder noch besser zur laufzeit holen im über eigenen code.
- Probiert hier mal OWASP/wrongsecrets
#+begin_notes
OWASP/Wrongsecrets als schulung erwähnen.
#+end_notes
* Was sind GitHub Personal Access Token (PATs)
#+Reveal: split
#+begin_notes
--- Sergej ---
- Eine Art von Authentifizierungscode für den Zugriff auf GitHub-Ressourcen ohne Anmeldeinformationen.
- GitHub Personal Access Tokens ermöglichen den Zugriff auf die eigenen GitHub-Ressourcen. Man benutzt sie zB bei Automatisierung von Skripten.
#+end_notes
- Alternative zu einem Passwort
- Können ein Ablaufdatum haben
- Automatisierung
* Was für Pats gibt es
#+begin_notes
--- Sergej ---
#+end_notes
** Alte Token (classic)
#+begin_notes
- Werden zu häufig ohne Ablaufdatum erstellt, was das Risiko einer unbeabsichtigten Nutzung erhöht.
- Können nicht auf einzelne Repositorys beschränkt werden können, was ein höheres Sicherheitsrisiko darstellt.
Wenn sie abhanden kommen.
#+end_notes
- Haben meistens zu hohe Rechte
- Werden häufig ohne Ablaufdatum erstellt
#+ATTR_HTML: :style height:30vh
[[./fig/pat_classic_overview.jpg]]
#+Reveal: split
#+begin_notes
- Eine ungenauere Kontrolle über Berechtigungen und Zugriffsrechte bieten, da sie allgemein weniger granular einstellbar sind.
#+end_notes
- Begrenzte Granularität bei Rechtevergabe 
#+ATTR_HTML: :style height:60vh
[[./fig/pat_classic_options.jpg]]

** Fine-grained Token
[[./fig/new_is_better.gif]]
#+begin_notes
--- Sergej ---
Neu ist immer besser :) Trifft hier auch zu.
#+end_notes
#+begin_notes
--- Sergej ---
- Höhere Granularität: Mit den fine grained Token kann man sagen auf welche Repos man den Zugriff gewährt.
- Flexible Zugriffssteuerung: Mit den Token kann man Zugriffsrechte dann nochmal viel granularer steuern.
Hat der Token Keinen / Lesenden oder auch schreibenden Zugriff auf zB: Secrets, Issues, Actions, Content, ...
- Im Gegensatz zu den klassischen Personal Access Tokens bieten Fine-grained Tokens Organisationen und Enterprises mehr Kontrolle. Admins können jedem Token das Recht auf ihre Repos wiederrufen.
#+end_notes
#+Reveal: split
- Höhere Granularität
- Flexible Zugriffssteuerung
- bessere Steuerung für Orgs und Enterprises
#+Reveal: split
[[./fig/create_fine_grained.gif]]
* Was haben wir gemacht?
** Die idee des scanners
#+begin_notes
--- Sergej ---
Warum Dockerhub:
- Naja das ist die erste Seite die mir eingefallen ist die ich selber mal benutzt habe um Images zu publishen.
- Wusste bereits das man da auch die Layer daten bekommt.
- Ist nach eigenen Aussagen die größte Bibliothek für Container-Images
- Hat ein free tier also nutzen das auch viele Leute.
API Endpunkte erschweren das Scannen:
- Es gibt keinen API Enpunkt bei dem man über alle Repos itterieren kann.
- Was aber geht ist eine Suche bei der man einen QRY hinschickt und dann Paginierte Repos zurückbekommt.
- Lösung war nun Random Strings und Einträge aus einer Wordlist gegen die API zu schmeißen.
Ratelimit:
- Hat mich echt geärgert. Weil ich da immer wieder reingelaufen bin obwohl ich laut meinen Metriken nicht drüber war.
- Später Festgestellt das man Authentifiziert mehr Requests schicken kann.
- Einen Server zu haben auf dem das im Hintergrund läuft ist schon ganz gut.
#+end_notes
- Ich scanne "einfach" mal Dockerhub
- Die Suche nach den Secrets
#+ATTR_HTML: :style height:40vh
[[./fig/just_do_it.gif]]
#+Reveal: split
#+NAME: <name>
#+BEGIN_SRC python
class SecretScanner(object):
    def __init__(self,rules_file):
        self._rules = self._load_rules(rules_file)

    def scan(self, string):
        for rule in self._rules:
            match = re.compile(rule["regex"]).search(string)
            if match:
                yield {"type": rule["id"], "secret": match.group(0)}

    def _load_rules(self, rules_file):
        with open(rules_file, 'r') as json_file:
            rules =  json.load(json_file)["rules"]
            return rules
#+END_SRC
#+Reveal: split
#+BEGIN_SRC json
{
    "id": "github-pat",
    "regex": "ghp_[0-9a-zA-Z]{36}"
}
#+END_SRC
#+ATTR_HTML: :style height:35vh
[[./fig/regex_meme.webp]]
** Arbeit aufteilen als team
- Mehr Secrets als gedacht
- Hol dir Leute, denen du vertraust
#+begin_notes
Mehr Secrets als gedacht:
- es sind täglich neue dazu gekommen.
- neben der Arbeit zu wenig Zeit um sich darum zu kümmern
- mehr aufwand als erwartet pro finding
Hol dir Leute, denen du vertraust:
- Relativ früh dazu entschieden zwei personen zu Involvieren.
- Früh einen Prozess etabliert wie wir uns Aufteilen.
- Prozesse Dokumentieren und Kommunikation einhalten
#+end_notes
** Tools
- SQL Datenbank mit den Scan Results
- Dokumente hinterlegt bei cryptpad
- Eigenes tool um schnell Github-Permissions zu überprüfen
#+begin_notes
- Datenbank:
Hier haben wir sowohl die Namen der Images und deren Tags gespeichert
Anfangs auch die Layer zu allen Tags, hat den Speicherplatz aufgebraucht. Später nur noch wenn Secrets gefunden wurden.
Status ob die Credentials valide sind und bereits bearbeitet wurden.
- Cryptpad:
Standart Nachricht für die erste Kontaktaufnahme.
Welche Unternehmen bereits Angeschrieben wurden (Ja es gab teilweise mehrere Token zu einer Org)
Kontaktpersonen / Zuständiger für eine Org
#+end_notes
** Eigene domain für gemeinsame kommunikation
- Name ist Programm -> Brokentoken
- One Face to the Customer
#+ATTR_HTML: :style height:40vh
[[./fig/brokentoken.png]]
#+begin_notes
Haben uns einen Namen ausgesucht der zu dem Thema pass was wir Reporten wollen.
Wollten nicht als Gruppe auftreten sondern als einzelne Person.
Jeder sollte der Kommunikation folgen können.
#+end_notes
** Statistiken :w1ntermute:
* wie war der prozess des disclosures
** Was ist ein disclosure prozess
- Responsible: Erst dem Hersteller, dann der Welt
- Full: Erst der Welt, dann dem Hersteller
- None: Niemandem
** Validieren der ergebnisse
- Bau dir Tooling
- Automatisierung ist dein Freund
- Grafisch aufbereitet macht es einfacher
** Herausfinden der Rechte
[[./fig/token_enum_1.jpg]]
#+Reveal: split
#+begin_notes
Erstmal gucken auf welche Orgs der Token Zugriff hat.
#+end_notes
[[./fig/token_enum_filter.jpg]]
#+Reveal: split
[[./fig/token_enum_2.jpg]]
#+begin_notes
Dann enumerieren was für Rechte man so bei den Repos hat. 
Admin / Write / Read ....
Read rechte auf ein Public Repo hat keinen Impact. Admin auf einem internen oder privatem Repo aber schon.
Read auf Private Repos kann auch von Interesse sein. 
#+end_notes
** Herausfinden der betroffenen Firma :w1ntermute:
** Herausfinden disclosure process :w1ntermute:
*** Meistens eher irgend eine email adresse finden
*** Einige haben gezahlt als teil ihres bugbountys
** Sorgt für eine security.txt :w1ntermute:
#+begin_notes
Ab hier macht oben splitiii und unten w1ntermute
#+end_notes
* Was waren die erfahrungen
** Firmen antworten oft einfach nicht
*** Die die antworten waren immer positiv
** Es war zu viel für uns. Kontakt mit github selber gesucht.
** Andere tokens waren einfacher sperren zu lassen beispiel AWS (in der Theorie)
** Einige resubmiten den token häufig
** Es gibt häufingen aus branchen (Crypto,Biotech,AI,Unis)
** Berater/Freelancer die in vielen orgs sind, schleifen die tokens mit.
* Fuckups
** Achte auf eure platte. Dockerhub ist groß
** Überlegt euch vorher eine Tabellenstruktur. MVP gehen immer in Production
** APIs mit Pagination ernst nehmen. Die gibt es nicht ohne grund
** Vergesst nicht eure Steuererklärung zu machen ;P

* was können firmen besser machen?
** Sorgt für eine security txt
** Ein ansprechpartner:in reicht
** Schulen der Mitarbeitenden
** Offboaridng aus githuborgas
** PATs müssen ablaufen
* was sind unsere tipps
** Sucht euch ein Team. Alleine macht anschreiben keinen Spaß
** Überlegt euch templates für emails damit ihr gleich kommuniziert
** Benutzt einen VPN (siehe auch du darfst hacken du musst dich nur nicht erwischen lassen). Hilft auch bei der validierung der IPs
** Dokumentiert eure zugriffe. (Firmen werden das durch auditlogs verifizieren wollen)
** Sei bei der kommunikation offen und höflich. Keine Informationen zurückhalten
** Fang den vortrag nicht eine woche vor vortrag an.
** Lass dich nicht überreden einen Vortrag zu halten
** Übrigens das waren nur dockerhub. Das gleiche gilt natürlich für alle archive.
* schlusswort
** Viel spaß beim bug bounty
** Firmen müssen mehr in die Verantwortung gezogen werden.
*** Dockerhub muss hier besser werden
*** Firmen müssen ihre
