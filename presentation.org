#+title:
#+author: w1ntermute,splitiii
#+OPTIONS: reveal_single_file:t toc:nil slideNumber:nil num:nil
#+REVEAL_INIT_OPTIONS: slideNumber:false
#+reveal_title_slide: %t </br> %a
#+REVEAL_THEME: white
#+REVEAL_PLUGINS: (highlight notes)
#+reveal_title_slide_background: ./fig/chatkontrolle_title.jpg



* docker build process :w1ntermute:
** Layer
#+begin_src dockerfile
# syntax=docker/dockerfile:1
FROM ubuntu:18.04
COPY . /app
RUN make /app
CMD python /app/app.py
#+end_src
#+Reveal: split
- Jede zeile ist ein neuer Layer.
- Docker mergt diese Layer, um das fertige image zu erstellen
- Diese werden zur Buildzeit ausgeführt
- Docker speichert diese mit, um zu zeigen wie ein image gebaut wird.
#+reveal: split
#+CAPTION: Beispiel von Docker layern auf der Website
#+name: fig:docke-1
#+ATTR_HTML: :style height:65vh
[[./fig/docker_layer_example.png]]

* wie kommen credentials in docker :w1ntermute:
** ENV
#+begin_src dockerfile :exports both :results value
FROM phusion/baseimage:jammy-1.0.1
ENV SUPER_SECURE_TOKEN="totally_not_visable_anywhere"
#+end_src

#+RESULTS:
** ARGS
** Hardcoded
** Die einzige richige methode


* Was sind GitHub Personal Access Tokens (PATs)
#+begin_notes
--- Sergej ---
#+end_notes
#+Reveal: split
#+begin_notes
--- Sergej ---
- Eine Art von Authentifizierungscode für den Zugriff auf GitHub-Ressourcen ohne Anmeldeinformationen.
- GitHub Personal Access Tokens ermöglichen den Zugriff auf die eigenen GitHub-Ressourcen. Man benutzt sie zB bei Automatisierung von Skripten.
#+end_notes
- Authentifizier für Zugriff auf GitHub-Ressourcen
- Häufige verwendung bei Automatisierung
- Classic: ghp_[0-9a-zA-Z]{36}
- Fine-grained: github_pat_[0-9a-zA-Z_]{82}
#+ATTR_HTML: :style height:35vh
[[./fig/regex_meme.webp]]
* Welche arten von PATs gibt es?
#+begin_notes
--- Sergej ---
#+end_notes
** Alte pats (classic)
#+Reveal: split
#+begin_notes
- Ohne Ablaufdatum erstellt werden können, was das Risiko einer unbeabsichtigten Nutzung erhöht.
- Nicht auf einzelne Repositorys beschränkt werden können, was ein höheres Sicherheitsrisiko darstellt.
- Eine ungenauere Kontrolle über Berechtigungen und Zugriffsrechte bieten, da sie allgemein weniger granular einstellbar sind.
#+end_notes
#+CAPTION: GitHub Personal Access Tokens, wie sie üblicherweise verwendet werden
#+name: fig:pat-overview-1
[[./fig/pat_classic_overview.jpg]]
#+Reveal: split
#+CAPTION: GitHub Personal Access Tokens, Möglichkeiten der Einstellung
#+name: fig:pat-options
#+ATTR_HTML: :style height:60vh
[[./fig/pat_classic_options.jpg]]

** Was machen die neuen besser?
[[./fig/new_is_better.gif]]
#+begin_notes
--- Sergej ---
Neu ist immer besssr :) Trifft hier auch zu.
#+end_notes
#+begin_notes
--- Sergej ---
- Höhere Granularität: Mit den fine grained Token kann man sagen auf welche Repos man den Zugriff gewährt.
- Flexible Zugriffssteuerung: Mit den Token kann man Zugriffsrechte dann nochmal viel granularer steuern.
Hat der Token Keinen / Lesenden oder auch schreibenden Zugriff auf zB: Secrets, Issues, Actions, Content, ...
- Im Gegensatz zu den klassischen Personal Access Tokens bieten Fine-grained Tokens Organisationen und Enterprises mehr Kontrolle. Admins können jedem Token das Recht auf ihre Repos wiederrufen.
#+end_notes
#+Reveal: split
- Höhere Granularität
- Flexible Zugriffssteuerung
- bessere Steuerung für Orgs und Enterprises
* was haben wir gemacht?
#+begin_notes
--- Sergej ---
#+end_notes
** Die idee des scanners
- Ich scanne "einfach" mal Dockerhub
- API Endpunkte erschweren das Scannen
- Ratelimit muss eingehalten werden.
#+ATTR_HTML: :style height:40vh
[[./fig/just_do_it.gif]]
#+begin_notes
--- Sergej ---
Warum Dockerhub:
- Naja das ist die erste Seite die mir eingefallen ist die ich selber mal benutzt habe um Images zu publishen.
- Wusste bereits das man da auch die Layer daten bekommt.
- Ist nach eigenen Aussagen die größte Bibliothek für Container-Images
- Hat ein free tier also nutzen das auch viele Leute.
API Endpunkte erschweren das Scannen:
- Es gibt keinen API Enpunkt bei dem man über alle Repos itterieren kann.
- Was aber geht ist eine Suche bei der man einen QRY hinschickt und dann Paginierte Repos zurückbekommt.
- Lösung war nun Random Strings und Einträge aus einer Wordlist gegen die API zu schmeißen.
Ratelimit:
- Hat mich echt geärgert. Weil ich da immer wieder reingelaufen bin obwohl ich laut meinen Metriken nicht drüber war.
- Später Festgestellt das man Authentifiziert mehr Requests schicken kann.
- Einen Server zu haben auf dem das im Hintergrund läuft ist schon ganz gut.
#+end_notes
** Arbeit aufteilen als team
- Mehr Secrets als gedacht
- Hol dir Leute, denen du vertraust
#+begin_notes
Mehr Secrets als gedacht:
- es sind täglich neue dazu gekommen.
- neben der Arbeit zu wenig Zeit um sich darum zu kümmern
- mehr aufwand als erwartet pro finding
Hol dir Leute, denen du vertraust:
- Relativ früh dazu entschieden zwei personen zu Involvieren.
- Früh einen Prozess etabliert wie wir uns Aufteilen.
#+end_notes
** Tools
- SQL Datenbank mit den Scan Results
- Dokumente hinterlegt bei cryptpad (digitalcourage)
** Eigene domain für gemeinsame kommunikation
- Name ist Programm -> Brokentoken
- One Face to the Customer
** Statistiken :w1ntermute:
* wie war der prozess des disclosures
** Was ist ein disclosure prozess
** Validieren der ergebnisse
** Herausfinden der Rechte
** Herausfinden der betroffenen Firma
** Herausfinden disclosure process
*** Meistens eher irgend eine email adresse finden
*** Einige haben gezahlt als teil ihres bugbountys
** Sorgt für eine security.txt

#+begin_notes
Ab hier macht oben splitiii und unten w1ntermute
#+end_notes
* Was waren die erfahrungen
** Firmen antworten oft einfach nicht
*** Die die antworten waren immer positiv
** Es war zu viel für uns. Kontakt mit github selber gesucht.
** Andere tokens waren einfacher sperren zu lassen beispiel AWS
** Einige resubmiten den token häufig
** Es gibt häufingen aus branchen (Crypto,Biotech,AI,Unis)
** Berater/Freelancer die in vielen orgs sind, schleifen die tokens mit.
* Fuckups
** Achte auf eure platte. Dockerhub ist groß
** Überlegt euch vorher eine Tabellenstruktur. MVP gehen immer in Production
** APIs mit Pagination ernst nehmen. Die gibt es nicht ohne grund
** Vergesst nicht eure Steuererklärung zu machen ;P

* was können firmen besser machen?
** Sorgt für eine security txt
** Ein ansprechpartner:in reicht
** Schulen der Mitarbeitenden
** Offboaridng aus githuborgas
** PATs müssen ablaufen
* was sind unsere tipps
** Sucht euch ein Team. Alleine macht anschreiben keinen Spaß
** Überlegt euch templates für emails damit ihr gleich kommuniziert
** Benutzt einen VPN (siehe auch du darfst hacken du musst dich nur nicht erwischen lassen). Hilft auch bei der validierung der IPs
** Dokumentiert eure zugriffe. (Firmen werden das durch auditlogs verifizieren wollen)
** Sei bei der kommunikation offen und höflich. Keine Informationen zurückhalten
** Fang den vortrag nicht eine woche vor vortrag an.
** Lass dich nicht überreden einen Vortrag zu halten
** Übrigens das waren nur dockerhub. Das gleiche gilt natürlich für alle archive.
* schlusswort
** Viel spaß beim bug bounty
** Firmen müssen mehr in die Verantwortung gezogen werden.
*** Dockerhub muss hier besser werden
*** Firmen müssen ihre
